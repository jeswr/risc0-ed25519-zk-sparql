// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{SPARQL_ED25519_ELF, SPARQL_ED25519_ID};
use risc0_zkvm::{default_prover, ExecutorEnv};
use serde_json;
use std::fs;
use std::path::Path;
use vc_utils::{ed25519_verify_input_from_preprocessed, VerifyInput, Ed25519Preprocessed};

fn load_preprocessed(path: &str) -> VerifyInput {
    // Read the preprocessed JSON file
    let json_str = fs::read_to_string(path)
        .expect(&format!("Failed to read {}", path));

    // Parse the JSON into Ed25519Preprocessed struct
    let preprocessed: Ed25519Preprocessed =
        serde_json::from_str(&json_str).expect(&format!("Failed to parse preprocessed JSON from {}", path));

    // Convert to VerifyInput
    let verify_input = ed25519_verify_input_from_preprocessed(preprocessed)
        .expect(&format!("Failed to create verify input from {}", path));

    verify_input
}

fn process_dir(path: &Path, verify_inputs: &mut Vec<VerifyInput>) {
    if let Ok(entries) = fs::read_dir(path) {
        for entry in entries.filter_map(Result::ok) {
            process_entry(&entry, verify_inputs);
        }
    }
}

fn process_entry(entry: &fs::DirEntry, verify_inputs: &mut Vec<VerifyInput>) {
    let path = entry.path();
    
    if path.is_dir() {
        process_dir(&path, verify_inputs);
    } else if path.extension().map_or(false, |ext| ext == "json") {
        // Only process JSON files
        let verify_input = load_preprocessed(&path.to_string_lossy());
        verify_inputs.push(verify_input);
    }
}

fn load_preprocessed_dir(path: &str) -> Vec<VerifyInput> {
    let mut verify_inputs = Vec::new();
    process_dir(Path::new(path), &mut verify_inputs);

    verify_inputs
}

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let verify_inputs = load_preprocessed_dir("./data/generated/ed25519-preprocessed/");

    let env = ExecutorEnv::builder()
        .write(&verify_inputs)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    let start = std::time::Instant::now();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover.prove(env, SPARQL_ED25519_ELF).unwrap();
    
    let end = std::time::Instant::now();
    println!("Proving took {:?}", end - start);
    
    // extract the receipt.
    let receipt = prove_info.receipt;

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let _output: Vec<String> = receipt.journal.decode().unwrap();

    println!("Output: {:?}", _output);

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt.verify(SPARQL_ED25519_ID).unwrap();
}
