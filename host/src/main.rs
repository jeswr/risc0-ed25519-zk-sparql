// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{SPARQL_ED25519_ELF, SPARQL_ED25519_ID};
use risc0_zkvm::{default_prover, ExecutorEnv};
use serde::{Deserialize, Serialize};
use spareval::QueryResults;
mod load;
use load::load_preprocessed_dir;

// TODO: Move this to methods
#[derive(Serialize, Deserialize, Debug)]
struct Output {
    pub result_string: String,
    pub pub_keys: Vec<String>,
}


fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let verify_inputs = load_preprocessed_dir("./data/generated/ed25519-preprocessed/");

    let env = ExecutorEnv::builder()
        .write(&verify_inputs)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    let start = std::time::Instant::now();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover.prove(env, SPARQL_ED25519_ELF).unwrap();
    
    let end = std::time::Instant::now();
    println!("Proving took {:?}", end - start);
    
    // extract the receipt.
    let receipt = prove_info.receipt;

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let _output: Output = receipt.journal.decode().unwrap();

    println!("Output: {:?}", _output);

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt.verify(SPARQL_ED25519_ID).unwrap();
}
